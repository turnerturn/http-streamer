spring.application.name: demo
logging.level.root: INFO
logging.level.com.example: DEBUG

spring.datasource.url: jdbc:h2:mem:testdb
spring.datasource.driverClassName: org.h2.Driver
spring.datasource.username: sa
spring.datasource.password: password
spring.jpa.database-platform: org.hibernate.dialect.H2Dialect
spring.h2.console.enabled: true
spring.datasource.hikari.idleTimeout: 60000
spring.datasource.hikari.maxLifetime: 60000
spring.datasource.hikari.minimumIdle: 10
spring.datasource.hikari.maximumPoolSize: 10

app.max-retries: 3
app.streamers:
  - enabled: true
    # cron expression to execute every 15 seconds
    cron: 0/15 * * * * ?
    description: Demo Source Get 200
    source.url: https://6c6e08ac-2e36-4a9d-b498-3964c8b725dd.mock.pstmn.io/httpstreamers/source/get200
    source.method: GET
    source.headers:
      - key: Keep-Alive
        value: 1000
      - key: Content-Type
        value: application/json
      - key: Authorization
        value: 'default-value'
        # TODO implement function similar to params.
        # TODO introduce args for function.  i.e.. function: 'getEnvironmentPropertyValue("AUTH_TOKEN")'
        # TODO remove fetcher classes after we have functions with args implemented.
        env: 'AUTH_TOKEN'
        cyberark.appid: 'appid'
        cyberark.object: 'object'
        cyberark.safe: 'safe'
    # these will be appended to the parameters of the specified url
    # i.e. https://www.example.com?param1=value1&param2=value2
    # all values (including values derived by funtion) will be url encoded.
    # params will be omitted from url if value is null/empty
    source.params:
      - key: param1
        value: value1
      - key: param2
        # default value if defined function throws exception.  Leave empty if no default value is needed.
        value: 'default-value'
        # you can also derive param value from output from a configured function.
        # if function's reponse value is null then we log warning and use default value if defined.
        # param's value will match data type of function's response.  i.e.. string, collection, long, double, etc.
        # TODO introduce args for function.  i.e.. function: 'getAdjustedMillisecondsTime(-600000)'
        function: 'getCurrentMillisecondsTimeLessTenMinutes'
    # required when source.method is POST or PUT.  Ignored when source.method is GET
    source.body: ''
    destination.method: POST
    destination.url:  https://6c6e08ac-2e36-4a9d-b498-3964c8b725dd.mock.pstmn.io/httpstreamers/destination/post200
    destination.headers:
      - key: Keep-Alive
        value: 1000
      - key: Content-Type
        value: application/json
      - key: Authorization
        value: 'default-value'
        # TODO implement function similar to params.
        function: 'getBasicAuthorizationHeaderValue'
        function.args:
          - 'username'
        cyberark.appid: 'appid'
        cyberark.object: 'object'
        cyberark.safe: 'safe'
    # these will be appended to the parameters of the specified url
    # i.e. https://www.example.com?param1=value1&param2=value2
    # all values (including values derived by funtion) will be url encoded.
    # params will be omitted from url if value is null/empty
    destination.params:
      - key: param1
        value: value1
      - key: param2
        # default value if defined function throws exception.  Leave empty if no default value is needed.
        value: value2
    # required when destination.method is POST or PUT.  Ignored when destination.method is GET
    destination.body: ''
